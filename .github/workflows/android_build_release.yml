name: Build y Release APK Android

on:
  push:
    branches: [ dev ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'
    - uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.29.0' 
    - run: flutter pub get
    - run: flutter pub run build_runner build --delete-conflicting-outputs  
    - run: flutter test --verbose   

  build:
    name: Build APK
    needs: test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'
    - uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.29.0' 
    - run: flutter pub get
    - run: flutter build apk --release
    - name: Upload APK
      uses: actions/upload-artifact@v3
      with:
        name: release-apk
        path: build/app/outputs/flutter-apk/app-release.apk
        retention-days: 1

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Get version from pubspec.yaml
      id: get_version
      run: |
        VERSION=$(grep "version:" pubspec.yaml | awk '{print $2}')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    - name: Download APK from build
      uses: actions/download-artifact@v3
      with:
        name: release-apk
        path: apk
    - name: 'Upload apk to GitHub'
      uses: ncipollo/release-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: "apk/app-release.apk"
        prerelease: false
        tag_name: v${{ steps.get_version.outputs.version }}
        name: Release v${{ steps.get_version.outputs.version }}
        body: |
          Automatically generated release by GitHub Actions.
          Application version: ${{ steps.get_version.outputs.version }}
